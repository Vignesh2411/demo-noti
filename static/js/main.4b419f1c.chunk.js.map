{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Button/Button.js","components/UI/Spinner/Spinner.js","store/actions/auth.js","store/actions/actionTypes.js","containers/Auth/Auth.js","containers/Auth/Logout/Logout.js","firebase.js","containers/Noti/Noti.js","App.js","registerServiceWorker.js","store/utility.js","store/reducers/auth.js","index.js","components/UI/Input/Input.module.css","components/UI/Button/Button.module.css","components/UI/Spinner/Spinner.module.css","containers/Auth/Auth.module.css","containers/Noti/Noti.module.css","App.module.css"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","button","disabled","Button","btnType","onClick","clicked","children","spinner","Loader","authSuccess","token","userId","type","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","Auth","state","controls","email","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","test","isNumeric","formElementsArray","id","config","form","formElement","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","Component","connect","auth","authData","returnSecureToken","url","axios","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","actions","path","Logout","onLogout","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Noti","logoutModeHandler","history","notificationModeHandler","addNotification","title","subtitle","theme","native","messaging","requestPermission","getToken","App","onTryAutoSignup","routes","component","exact","withRouter","getItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","updateObject","oldObject","updatedProperties","initialState","authStart","action","authFail","authLogout","setAuthRedirectPath","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","authReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.4b419f1c.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }; //always we have pass this three params along with this url\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC5ffRrFv520zn4BiVOYiGPoKEw1UPRWn4';\n        if (!isSignup) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC5ffRrFv520zn4BiVOYiGPoKEw1UPRWn4';\n        }\n        axios.post(url, authData) //above url we got from 'firebase rest auth' doc(we have to pass two diff url for singup and login)...this is used to generate tokens...we have to replace the authkey in that url which we will get from our firebase db (AUTH FIELD)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', response.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userId', response.data.localId); //here we are setting token, expirationdate and userId to localstorage of browser\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.data.error));\n            });\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId'); //this id we are getting from firebase api\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }   \n        }\n    };\n};","export const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Auth extends Component {\r\n    state = {   \r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    checkValidity ( value, rules ) {\r\n        let isValid = true;\r\n        if ( !rules ) {\r\n            return true;\r\n        }\r\n\r\n        if ( rules.required ) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if ( rules.minLength ) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if ( rules.maxLength ) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if ( rules.isEmail ) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test( value ) && isValid\r\n        }\r\n\r\n        if ( rules.isNumeric ) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test( value ) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../../../store/actions/index';\n\nclass Logout extends Component {\n    componentDidMount () {\n        this.props.onLogout();\n    }\n\n    render () {\n        return <Redirect to=\"/\"/>;\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);","import firebase from 'firebase'\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyC5ffRrFv520zn4BiVOYiGPoKEw1UPRWn4\",\r\n    authDomain: \"fir-noti-83dbd.firebaseapp.com\",\r\n    databaseURL: \"https://fir-noti-83dbd.firebaseio.com\",\r\n    projectId: \"fir-noti-83dbd\",\r\n    storageBucket: \"fir-noti-83dbd.appspot.com\",\r\n    messagingSenderId: \"242462171500\",\r\n    appId: \"1:242462171500:web:328848b23556de2d495349\",\r\n    measurementId: \"G-E2EQGBTCB1\"\r\n\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport default firebase","import React, {Component} from 'react';\r\n\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Noti.module.css'\r\n\r\nimport addNotification from 'react-push-notification';\r\n\r\nimport firebase from '../../firebase';\r\n\r\n\r\nclass Noti extends Component {\r\n\r\n    componentDidMount () {\r\n     \r\n\r\n      const messaging = firebase.messaging()\r\n        messaging.requestPermission().then(()=>{\r\n          return messaging.getToken()\r\n        }).then(token=>{\r\n          console.log('Token : ',token)\r\n          console.log('welcome')\r\n        }).catch((err)=>{\r\n          console.log(err);\r\n          \r\n        })\r\n    }\r\n\r\n    logoutModeHandler = () => {\r\n        this.props.history.push('/logout');\r\n    }\r\n\r\n    notificationModeHandler = () => {  \r\n\r\n       addNotification({\r\n            title: 'Welcome To My Page',\r\n           subtitle: 'This is a subtitle',\r\n            message: 'You have received some message',\r\n            theme: 'darkblue',\r\n            native: true // when using native, your OS will handle theming.\r\n        });      \r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div className={classes.Noti}>\r\n                 <Button \r\n                    clicked={this.notificationModeHandler}\r\n                    btnType=\"Success\">SendPushNotification</Button>\r\n\r\n                <Button \r\n                    clicked={this.logoutModeHandler}\r\n                    btnType=\"Danger\">Logout</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Noti;\r\n\r\n\r\n//Note:\r\n\r\n//npm install gh-pages --save-dev\r\n\r\n//git init\r\n\r\n//git remote add origin \"https://github.com/Vignesh2411/demo-noti.git\"\r\n\r\n//  \"homepage\": \"http://Vigneshtj2411.github.io/demo-noti\",\r\n\r\n// changes has to do in package.json ","import React, { Component } from 'react';\nimport classes from './App.module.css';\n\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Auth from './containers/Auth/Auth';\nimport Logout from './containers/Auth/Logout/Logout';\nimport Noti from './containers/Noti/Noti';\nimport * as actions from './store/actions/index';\n\nimport { Notifications } from 'react-push-notification';\n\nclass App extends Component {\n\n  componentDidMount () {\n    this.props.onTryAutoSignup();\n  }\n\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path=\"/\" component={Auth} />\n        <Route path=\"/auth\" component={Auth} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n\n    if ( this.props.isAuthenticated ) {\n      routes = (\n        <Switch>         \n          <Route path=\"/logout\" component={Logout} />\n          <Route path=\"/noti\" exact component={Noti} />\n          <Redirect to=\"/noti\" />\n        </Switch>\n      );\n    }\n\n    return (\n       <div> \n         <Notifications />           \n          {routes}      \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch( actions.authCheckState() )\n  };\n};\n\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )( App ) );\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    authRedirectPath: '/'\n};\n\nconst authStart = ( state, action ) => {\n    return updateObject( state, { error: null, loading: true } );\n};\n\nconst authSuccess = (state, action) => {\n    return updateObject( state, { \n        token: action.idToken,\n        userId: action.userId,\n        error: null,\n        loading: false\n     } );\n};\n\nconst authFail = (state, action) => {\n    return updateObject( state, {\n        error: action.error,\n        loading: false\n    });\n};\n\nconst authLogout = (state, action) => {\n    return updateObject(state, { token: null, userId: null });\n};\n\nconst setAuthRedirectPath = (state, action) => {\n    return updateObject(state, { authRedirectPath: action.path })\n}\n\nconst reducer = ( state = initialState, action ) => {\n    switch ( action.type ) {\n        case actionTypes.AUTH_START: return authStart(state, action);\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n        case actionTypes.SET_AUTH_REDIRECT_PATH: return setAuthRedirectPath(state,action);\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as registerServiceWorker from './registerServiceWorker';\n\nimport authReducer from './store/reducers/auth';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n    auth: authReducer\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nregisterServiceWorker.register(); \n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3fUJk\",\"Label\":\"Input_Label__1C6ol\",\"InputElement\":\"Input_InputElement__2dPdC\",\"Invalid\":\"Input_Invalid__OEFSz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__NSzrq\",\"Success\":\"Button_Success__1TFk_\",\"Danger\":\"Button_Danger__1PdhU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__2Rpex\",\"load2\":\"Spinner_load2__1iXOM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3pdUA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Noti\":\"Noti_Noti__11EPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2fJzC\"};"],"sourceRoot":""}